name: CI/CD Pipeline


#on push -> run pipeline
on:
  push:
    branches: [ main ] #runs when pushed to main branch
  pull_requests:
    branches: [ main ] #runs when someone makes a PR to main
  
jobs: #define different tasks pipeline will do
  test: #first job is called "test"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests flask

      - name: Run tests
        run: |
          pytest


  build:
    needs: test #only build it tests pass
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push weather fetcher
        user: docker/build-push-action@v2
        with:
          context: ./services/weather_fetcher
          push: true
          tags: yourdockerhub/weather-fetcher:latest
  

  """
    need to create dockerhub account for this to work
      why? -
        we need somewhere to store docker image so:
          -its publicly acessible for deployment to pull them
          -is version controlled (each push creates new image)
          -can be pulled from anywhere

        flow
          my code -> gh actions -> build Docker img ->
          push to docker hub -> deployment pulls from docker hub

        think of dockerhub as github for docker images

        could also use AWS ECR, github container registry or google container registry


    why does deployment need to pull images?
      it doesnt have to per-say, my prev approach was to build on the host
      this meant running docker compose up on the host itself

      but claude says, for larger projects, its better to have gh actions
      already built the docker image and published it to the dockerhub registry
      then on the host, instead of doing the build, we just pull the image from dockerhub
      its "build-once and use anywhere" - more production grade
          -better for scaling (mult servers can pull same image)
          -dont need git or build tools on prod servers
          - can rollback by pulling older image versions
      
          building on host is like cooking a meal from scratch each time
          build and pull on host is like cooking once, freezing portions, and reheating as needed
  """

